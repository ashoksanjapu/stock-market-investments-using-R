library(readxl)
library(ggplot2)
library(dplyr)
library(tidyverse)
att_data <- read_excel("/Users/ashoksanjapu/Downloads/Data Analytics1_ sushma/Project_ADTA_DataSet.xlsx", sheet = "T")
View(att_data)
View(att_data)
# 1. Time Series Plot for 'Adj Close' Price
ggplot(att_data, aes(x = Date, y = `Adj Close`)) +
geom_line() +
labs(title = "Adjusted Close Price Over Time for AT&T",
x = "Date",
y = "Adjusted Close Price") +
theme_minimal()
library(readxl)
library(ggplot2)
library(dplyr)
att_data <- read_excel("Project_ADTA_DataSet.xlsx", sheet = "T") %>% mutate(Company = "AT&T")
nvidia_data <- read_excel("Project_ADTA_DataSet.xlsx", sheet = "NVDA") %>% mutate(Company = "NVIDIA")
JPMorgan_data <- read_excel("Project_ADTA_DataSet.xlsx", sheet = "JPMCL.SN") %>% mutate(Company = "JP Morgan")
CMG_data <- read_excel("Project_ADTA_DataSet.xlsx", sheet = "CMG") %>% mutate(Company = "CMG")
SPOT_data <- read_excel("Project_ADTA_DataSet.xlsx", sheet = "SPOT") %>% mutate(Company = "SPOT")
TATAELXSI_data <- read_excel("Project_ADTA_DataSet.xlsx", sheet = "TATAELXSI.NS") %>% mutate(Company = "TATAELXSI")
META_data <- read_excel("Project_ADTA_DataSet.xlsx", sheet = "META") %>% mutate(Company = "META")
convert_to_numeric <- function(x) {
# First, convert any factors to character if they are not already
x <- as.character(x)
# Remove commas, dollar signs, and other non-numeric characters
x <- gsub("[^0-9.-]", "", x)
# Convert to numeric
as.numeric(x)
}
# Apply the conversion to the 'Open' column for each dataset
att_data$Open <- convert_to_numeric(att_data$Open)
CMG_data$Open <- convert_to_numeric(CMG_data$Open)
JPMorgan_data$Open <- convert_to_numeric(JPMorgan_data$Open)
META_data$Open <- convert_to_numeric(META_data$Open)
nvidia_data$Open <- convert_to_numeric(nvidia_data$Open)
SPOT_data$Open <- convert_to_numeric(SPOT_data$Open)
TATAELXSI_data$Open <- convert_to_numeric(TATAELXSI_data$Open)
# Convert 'High' column for all datasets to numeric
att_data$High <- convert_to_numeric(att_data$High)
CMG_data$High <- convert_to_numeric(CMG_data$High)
JPMorgan_data$High <- convert_to_numeric(JPMorgan_data$High)
META_data$High <- convert_to_numeric(META_data$High)
nvidia_data$High <- convert_to_numeric(nvidia_data$High)
SPOT_data$High <- convert_to_numeric(SPOT_data$High)
TATAELXSI_data$High <- convert_to_numeric(TATAELXSI_data$High)
# Convert 'Low' column for all datasets to numeric
att_data$Low <- convert_to_numeric(att_data$Low)
CMG_data$Low <- convert_to_numeric(CMG_data$Low)
JPMorgan_data$Low <- convert_to_numeric(JPMorgan_data$Low)
META_data$Low <- convert_to_numeric(META_data$Low)
nvidia_data$Low <- convert_to_numeric(nvidia_data$Low)
SPOT_data$Low <- convert_to_numeric(SPOT_data$Low)
TATAELXSI_data$Low <- convert_to_numeric(TATAELXSI_data$Low)
# Convert 'Close' column for all datasets to numeric
att_data$Close <- convert_to_numeric(att_data$Close)
CMG_data$Close <- convert_to_numeric(CMG_data$Close)
JPMorgan_data$Close <- convert_to_numeric(JPMorgan_data$Close)
META_data$Close <- convert_to_numeric(META_data$Close)
nvidia_data$Close <- convert_to_numeric(nvidia_data$Close)
SPOT_data$Close <- convert_to_numeric(SPOT_data$Close)
TATAELXSI_data$Close <- convert_to_numeric(TATAELXSI_data$Close)
# Convert 'Adj Close' column for all datasets to numeric
att_data$AdjClose <- convert_to_numeric(att_data$AdjClose)
CMG_data$AdjClose <- convert_to_numeric(CMG_data$AdjClose)
JPMorgan_data$AdjClose <- convert_to_numeric(JPMorgan_data$AdjClose)
META_data$AdjClose <- convert_to_numeric(META_data$AdjClose)
nvidia_data$AdjClose <- convert_to_numeric(nvidia_data$AdjClose)
SPOT_data$AdjClose <- convert_to_numeric(SPOT_data$AdjClose)
TATAELXSI_data$AdjClose <- convert_to_numeric(TATAELXSI_data$AdjClose)
# Convert 'Volume' column for all datasets to numeric
att_data$Volume <- convert_to_numeric(att_data$Volume)
CMG_data$Volume <- convert_to_numeric(CMG_data$Volume)
JPMorgan_data$Volume <- convert_to_numeric(JPMorgan_data$Volume)
META_data$Volume <- convert_to_numeric(META_data$Volume)
nvidia_data$Volume <- convert_to_numeric(nvidia_data$Volume)
SPOT_data$Volume <- convert_to_numeric(SPOT_data$Volume)
TATAELXSI_data$Volume <- convert_to_numeric(TATAELXSI_data$Volume)
install.packages("tidyverse")
# Load tidyverse to use its functions
library(tidyverse)
# Now you should be able to use drop_na() without errors
att_data <- drop_na(att_data)
CMG_data <- drop_na(CMG_data)
JPMorgan_data <- drop_na(JPMorgan_data)
META_data <- drop_na(META_data)
nvidia_data <- drop_na(nvidia_data)
SPOT_data <- drop_na(SPOT_data)
TATAELXSI_data <- drop_na(TATAELXSI_data)
combined_data <- bind_rows(att_data, CMG_data, JPMorgan_data, META_data, nvidia_data, SPOT_data, TATAELXSI_data)
# Plot all companies on a single graph with facets and different colors for each company's line
ggplot(combined_data, aes(x = Date, y = `AdjClose`, group = Company, color = Company)) +
geom_line() +
facet_wrap(~ Company, scales = "free_y") + # Allows for separate y-axes
labs(title = "Adjusted Close Price Over Time by Company",
x = "Date",
y = "Adjusted Close Price") +
theme_minimal() +
theme(legend.position = "none")
install.packages("tidyverse")
# Calculate daily returns for each company
combined_data <- combined_data %>%
arrange(Company, Date) %>%
group_by(Company) %>%
mutate(Daily_Return = (AdjClose / lag(AdjClose) - 1) * 100) %>%
ungroup()
# Calculate daily returns for each company
combined_data <- combined_data %>%
arrange(Company, Date) %>%
group_by(Company) %>%
mutate(Daily_Return = (AdjClose / lag(AdjClose) - 1) * 100) %>%
ungroup()
install.packages("reshape2")
library(reshape2)
library(ggplot2)
# Assuming combined_data is your combined dataset and it's ordered by Date within each Company
# Calculate daily returns for each company
combined_data <- combined_data %>%
arrange(Company, Date) %>%
group_by(Company) %>%
mutate(Daily_Return = (AdjClose / lag(AdjClose) - 1)) %>%
ungroup()
# Calculate daily returns for each company
combined_data <- combined_data %>%
arrange(Company, Date) %>%
group_by(Company) %>%
mutate(Daily_Return = (AdjClose / lag(AdjClose) - 1) * 100) %>%
ungroup()
install.packages("dplyr")
install.packages("dplyr")
install.packages("dplyr")
install.packages("dplyr")
install.packages("dplyr")
install.packages("dplyr")
install.packages("dplyr")
combined_data <- combined_data %>%
arrange(Company, Date) %>%
group_by(Company) %>%
mutate(Daily_Return = (AdjClose / lag(AdjClose) - 1) * 100) %>%
ungroup()
combined_data <- combined_data %>%
arrange(Company, Date) %>%
group_by(Company) %>%
mutate(Daily_Return = (AdjClose / lag(AdjClose) - 1) * 100) %>%
ungroup()
combined_data <- combined_data %>%
arrange(Company, Date) %>%
group_by(Company) %>%
mutate(Daily_Return = (AdjClose / lag(AdjClose) - 1) * 100) %>%
ungroup()
